class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if not nums:
            return -1

        def find_pivot(arr):
            low, high = 0, len(arr) - 1
            while low < high:
                if arr[low] < arr[high]:
                    return low
                mid = (low + high) // 2
                if arr[mid] > arr[high]:
                    low = mid + 1
                else:
                    high = mid
            return low

        def binary_search(arr, low, high, target):
            while low <= high:
                mid = (low + high) // 2
                if arr[mid] == target:
                    return mid
                elif arr[mid] < target:
                    low = mid + 1
                else:
                    high = mid - 1
            return -1

        pivot = find_pivot(nums)

        if nums[pivot] <= target <= nums[-1]:
            return binary_search(nums, pivot, len(nums) - 1, target)
        else:
            return binary_search(nums, 0, pivot - 1, target)
