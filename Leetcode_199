class Solution:
    def rightSideView(self, root):
        """
        :type root: Optional[TreeNode]
        :rtype: List[int]
        """
        if not root:
            return []

        stack = [(root, 0)]  # Stack stores (node, level)
        rightmost_values = []

        visited_levels = set()

        while stack:
            node, level = stack.pop()
            if level not in visited_levels:
                rightmost_values.append(node.val)
                visited_levels.add(level)

            # Push left first so that right is processed first (LIFO)
            if node.left:
                stack.append((node.left, level + 1))
            if node.right:
                stack.append((node.right, level + 1))

        return rightmost_values
