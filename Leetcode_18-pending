class Solution(object):
    def fourSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        if len(nums) < 4:
            return []

        nums.sort()
        n = len(nums)
        result = set()  # Use set of tuples to avoid duplicates
        start = 0
        end = n - 1

        while end - start >= 3:
            total = nums[start] + nums[end]
            rem_target = target - total

            # Apply two-pointer method in the subarray (start+1 to end-1)
            left = start + 1
            right = end - 1
            while left < right:
                pair_sum = nums[left] + nums[right]
                if pair_sum == rem_target:
                    quad = (nums[start], nums[left], nums[right], nums[end])
                    result.add(quad)
                    left += 1
                    right -= 1
                elif pair_sum < rem_target:
                    left += 1
                else:
                    right -= 1

            # Recursive step based on the sum
            if total > target:
                result.update(tuple(q) for q in self.fourSum(nums[start:end], target))
                break
            elif target > total:
                result.update(tuple(q) for q in self.fourSum(nums[start+1:end+1], target))
                break
            else:
                result.update(tuple(q) for q in self.fourSum(nums[start+1:end+1], target))
                result.update(tuple(q) for q in self.fourSum(nums[start:end], target))
                break
